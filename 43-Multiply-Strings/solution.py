class Solution(object):
    def multiply(self, num1, num2):
        """
        :type num1: str
        :type num2: str
        :rtype: str
        """
        
        M = {
                '00':'00','01':'00','02':'00','03':'00','04':'00','05':'00','06':'00','07':'00','08':'00','09':'00',
                '10':'00','11':'01','12':'02','13':'03','14':'04','15':'05','16':'06','17':'07','18':'08','19':'09',
                '20':'00','21':'02','22':'04','23':'06','24':'08','25':'10','26':'12','27':'14','28':'16','29':'18',
                '30':'00','31':'03','32':'06','33':'09','34':'12','35':'15','36':'18','37':'21','38':'24','39':'27',
                '40':'00','41':'04','42':'08','43':'12','44':'16','45':'20','46':'24','47':'28','48':'32','49':'36',
                '50':'00','51':'05','52':'10','53':'15','54':'20','55':'25','56':'30','57':'35','58':'40','59':'45',
                '60':'00','61':'06','62':'12','63':'18','64':'24','65':'30','66':'36','67':'42','68':'48','69':'54',
                '70':'00','71':'07','72':'14','73':'21','74':'28','75':'35','76':'42','77':'49','78':'56','79':'63',
                '80':'00','81':'08','82':'16','83':'24','84':'32','85':'40','86':'48','87':'56','88':'64','89':'72',
                '90':'00','91':'09','92':'18','93':'27','94':'36','95':'45','96':'54','97':'63','98':'72','99':'81'
                }
        S = {
                '00':'0','01':'1','02':'2','03':'3','04':'4','05':'5','06':'6','07':'7','08':'8','09':'9',
                '10':'1','11':'2','12':'3','13':'4','14':'5','15':'6','16':'7','17':'8','18':'9','19':'10',
                '20':'2','21':'3','22':'4','23':'5','24':'6','25':'7','26':'8','27':'9','28':'10','29':'11',
                '30':'3','31':'4','32':'5','33':'6','34':'7','35':'8','36':'9','37':'10','38':'11','39':'12',
                '40':'4','41':'5','42':'6','43':'7','44':'8','45':'9','46':'10','47':'11','48':'12','49':'13',
                '50':'5','51':'6','52':'7','53':'8','54':'9','55':'10','56':'11','57':'12','58':'13','59':'14',
                '60':'6','61':'7','62':'8','63':'9','64':'10','65':'11','66':'12','67':'13','68':'14','69':'15',
                '70':'7','71':'8','72':'9','73':'10','74':'11','75':'12','76':'13','77':'14','78':'15','79':'16',
                '80':'8','81':'9','82':'10','83':'11','84':'12','85':'13','86':'14','87':'15','88':'16','89':'17',
                '90':'9','91':'10','92':'11','93':'12','94':'13','95':'14','96':'15','97':'16','98':'17','99':'18'
                }
        if num1 == '0' or num2 == '0':
            return '0'
        #reverse the string
        s1 = num1[::-1]
        s2 = num2[::-1]
        Mult = [[] for _ in range(len(s1)+len(s2))]
        for i1 in range(len(s1)):
            for i2 in range(len(s2)):
                Mtmp = M[s1[i1]+s2[i2]]
                Mult[i1+i2+1].append(Mtmp[0])
                Mult[i1+i2].append(Mtmp[1])
        for i in range(len(Mult)):
            if Mult[i]==[]:
                break
            Snum = '0' 
            for j in Mult[i]:
                Snum = S[Snum+j]
                if len(Snum)>1:
                    Snum = Snum[1]
                    Mult[i+1].append('1')
            Mult[i] = Snum
        while Mult[-1] == ([] or '0'):
            Mult.pop()
        return ''.join(Mult[::-1])
    
    
    def sol_TLE(self, num1, num2):
        if not num1 or not num2:
            return '0'
        
        res = ''
        for i in xrange(len(num2)):
            index = len(num2) - i - 1
            local = self.eval_multi(num1, num2[index], i)
            res = self.eval_add(res, local)
        
        i = 0
        while i < len(res) - 1: # neglect last digit
            if res[i] != '0':
                break
            
            i += 1
        
        return res[i :]
            
    
    '''
    A method to muitiply the num1, and num2, num2 only has one digit.
    '''
    def eval_multi(self, num1, num2, base):
        res = ''
        c = 0
        for i in reversed(xrange(len(num1))):
            local = int(num1[i]) * int(num2) + c
            res = str(local % 10) + res
            c = local / 10
        
        if c != 0:
            res = str(c) + res
        
        for i in xrange(base):  # add '0' to the tail
            res += '0'
        
        return res
        
    '''
    A method to add num1 and num2
    '''
    def eval_add(self, num1, num2):
        res = ''
        c = 0
        m, n = len(num1), len(num2)
        
        # reverse two number
        num1, num2 = num1[::-1], num2[::-1]
        
        i = 0
        while i < m or i < n:
            local = c
            if i < m:
                local += int(num1[i])
            
            if i < n:
                local += int(num2[i])
            
            res += str(local % 10)
            c = local / 10
            i += 1
        
        if c != 0:
            res += str(c)
        
        return res[::-1]
                